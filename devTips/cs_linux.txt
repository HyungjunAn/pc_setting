-------------------------------------------------------------
# head: 파일의 앞 부분 출력
-------------------------------------------------------------
$ head <FILE>
$ head -n <LINE_NUM> <FILE>

-------------------------------------------------------------
# tail: 파일의 뒷 부분 출력
-------------------------------------------------------------
tail: 파일의 뒷 부분 출력
$ tail <FILE>
$ tail -n <LINE_NUM> <FILE>


-------------------------------------------------------------
# file: 파일의 종류 확인
-------------------------------------------------------------
$ file <FILE>


-------------------------------------------------------------
# wild card
-------------------------------------------------------------
*				// 모든 문자
?				// 모든 하나의 문자
[characters]	// characters 문자셋에 포함된 문자
[!characters]	// characters 문자셋에 포함되지 않은 문자
[[:class:]]		// 지정된 문자 클래스에 포함된 문자
[:alnum:]		// 모든 알파벳과 숫자 문자
[:alpha:]		// 모든 알파벳 문자
[:digit:]		// 모든 숫자
[:lower:]		// 모든 소문자
[:upper:]		// 모든 대문자


-------------------------------------------------------------
# mkdir: 파일 생성
-------------------------------------------------------------
-------------------------------------------------------------
# cp: 파일 / 디렉토리 복사
-------------------------------------------------------------
-------------------------------------------------------------
# mv: 파일 / 디렉토리 이동(이름 변경)
-------------------------------------------------------------
-------------------------------------------------------------
# rm: 파일 / 디렉토리 삭제
-------------------------------------------------------------
-------------------------------------------------------------
# which: 프로그램 위치 확인
-------------------------------------------------------------
$ which gcc

-------------------------------------------------------------
# man: 메뉴얼 페이지 확인
# whatis: man 도움말 중 간략한 정보
-------------------------------------------------------------
1 - 사용자 명령어
2 - 커널 시스템 콜
3 - C 라이브러리 API
4 - 장치 노드 및 드라이버 등의 특수 파일
5 - 파일포맷
6 - 게임 또는 미디어
7 - 그 외
8 - 시스템 관리용


-------------------------------------------------------------
# uniq: 중복된 행 삭제
-------------------------------------------------------------
$ uniq <FILE>
-c: 중복 행 개수 출력
-d: 중복 행 중 한 행만 출력
-D: 중복 행 모두 출력
-u: 중복 행 아닌 것만 출력

-------------------------------------------------------------
# sort: 파일 내용 정렬
-------------------------------------------------------------
$ sort <FILE>
-f: 대소문자 구별 안 함
-r: 역순
-o: 저장할 파일명 지정

-------------------------------------------------------------
# wc: 단어 개수 출력
-------------------------------------------------------------
$ wc <FILE>
-c: 문자수
-m: 캐릭터 수
-l: 라인 수
-w: 단어 수
-L: 가장 긴 한줄

-------------------------------------------------------------
# alias: 새로운 명령어 생성
-------------------------------------------------------------
$ alias <NEW_CMD>='<CMD_SET>'
$ unalias <CMD>		// 삭제

-------------------------------------------------------------
# redirection(리다이렉션): 표준 스트림 변경
0: 표준 입력 스트림
1: 표준 출력 스트림
2: 표준 에러 스트림
-------------------------------------------------------------
<		입력 방향을 재지정
>		출력 방향을 재지정
>>		출력에 덧붙임(파일 뒤에 붙임)
2>		오류 방향을 재지정
&>		출력과 오류 재지정
>&		오류와 출력 재지정(권장)
1>&2	출력을 오류로
2>&1	오류를 출력으로

!! 오류 출력하지 않게 하는 방법
$ gcc a.c 2> /dev/null

!! 괄호(앞 뒤 공백 필수)를 이용하면 복수의 명령 결과도 리다이렉션 가능함
$ ( pwd; ls; data ) > out.txt


-------------------------------------------------------------
# pipe(파이프): 한 명령의 출력을 다른 명령의 입력으로 연결
-------------------------------------------------------------
$ <CMD_SRC> | <CMD_DIST>

tee를 이용한 표준 출력, 파일로 출력 동시 수행
$ <CMD_SRC> | tee <CMD_DIST>


-------------------------------------------------------------
# mkfifo:
-------------------------------------------------------------

-------------------------------------------------------------
# 확장
-------------------------------------------------------------
중괄호"{}": 중괄호 안의 패턴과 일치하는 텍스트 문자열로 확장(공백이 없어야 함)
ex) $ echo num{1,2,3,4,5,6,7,8,9}
ex) $ echo num{1..9}

-------------------------------------------------------------
# ln: symbolic / hard link 생성
-------------------------------------------------------------
// symbolic
$ ln -s <SOURCE> <LINK>
// hard
ln <SOURCE> <LINK>


-------------------------------------------------------------
# tar: 파일 묶기
-------------------------------------------------------------
tar로 묶고 gzip으로 압축
	$ tar zcvf T.tar.gz *

gzip 풀고 tar 풀기
	$ tar zxvf T.tar.gz

현재 디렉토리의 모든 파일과 디렉토리를 tar로 묶기	
tar cvf T.tar *
대상 디렉토리를 포함한 모든 파일과 디렉토리를 tar로 묶기	
tar cvf T.tar [PATH]
파일을 지정하여 tar 아카이브로 묶기	tar cvf T.tar [FILE_1] [FILE_2]
tar 아카이브를 현재 디렉토리에 풀기	tar xvf T.tar
tar 아카이브를 지정된 디렉토리에 풀기	tar xvf T.tar -C [PATH]
tar 아카이브의 내용 확인하기	tar tvf T.tar
현재 디렉토리를 tar로 묶고 bzip2로 압축하기	tar jcvf T.tar.bz2 *
bzip2로 압축된 tar 아카이브를 현재 디렉토리에 풀기	tar jxvf T.tar.bz2
tar 아카이브 묶거나 풀 때 파일 별 진행 여부 확인하기	tar cvfw T.tar *

-------------------------------------------------------------
# gzip: 압축
-------------------------------------------------------------
압축
	$ gzip aaa.jpg 
해제
	$ gzip -d {압축 파일명}.gz
